name: Build Rider & Driver APKs (Flutter)

on:
  workflow_dispatch:
    inputs:
      vps_host:
        description: 'VPS host'
        required: true
        default: '159.198.36.105'
      vps_user:
        description: 'VPS user'
        required: true
        default: 'root'
      app_rider_path:
        description: 'Absolute path to rider Flutter app on VPS'
        required: true
        default: '/var/www/tagxi/appsrc/Main-File-August-20/flutter_user/flutter_user'
      app_driver_path:
        description: 'Absolute path to driver Flutter app on VPS'
        required: true
        default: '/var/www/tagxi/appsrc/Main-File-August-20/flutter_driver/flutter_driver'
      android_maps_key:
        description: 'Android Maps API key (dev) - optional if secret provided'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine available secrets
        id: secrets
        run: |
          has_vps=$([ -n "${{ secrets.VPS_PASSWORD }}" ] && echo true || echo false)
          has_gcp=$([ -n "${{ secrets.GCP_SA_KEY_JSON }}" ] && echo true || echo false)
          echo "has_vps=$has_vps" >> "$GITHUB_OUTPUT"
          echo "has_gcp=$has_gcp" >> "$GITHUB_OUTPUT"

      - name: Install tooling (sshpass, rsync)
        run: sudo apt-get update && sudo apt-get install -y rsync openssh-client sshpass jq

      - name: Add VPS host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 22 ${{ github.event.inputs.vps_host }} >> ~/.ssh/known_hosts

      - name: Rsync Rider and Driver projects from VPS
        if: ${{ steps.secrets.outputs.has_vps == 'true' }}
        env:
          SSHPASS: ${{ secrets.VPS_PASSWORD }}
        run: |
          test -n "$SSHPASS"
          sshpass -e rsync -a --delete ${{ github.event.inputs.vps_user }}@${{ github.event.inputs.vps_host }}:${{ github.event.inputs.app_rider_path }}/ ./rider/
          sshpass -e rsync -a --delete ${{ github.event.inputs.vps_user }}@${{ github.event.inputs.vps_host }}:${{ github.event.inputs.app_driver_path }}/ ./driver/

      - name: Authenticate to Google Cloud
        if: ${{ steps.secrets.outputs.has_gcp == 'true' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_JSON }}

      - name: Set up gcloud
        if: ${{ steps.secrets.outputs.has_gcp == 'true' }}
        uses: google-github-actions/setup-gcloud@v2

      - name: Download google-services.json (Rider and Driver)
        if: ${{ steps.secrets.outputs.has_gcp == 'true' }}
        env:
          PID: hayyaride
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          mkdir -p firebase-configs
          # Rider
          RIDER_APP=$(curl -sS -H "Authorization: Bearer ${ACCESS_TOKEN}" "https://firebase.googleapis.com/v1beta1/projects/${PID}/androidApps" | jq -r '.apps[] | select(.packageName=="com.hayyaride.rider").name')
          if [ -n "$RIDER_APP" ] && [ "$RIDER_APP" != "null" ]; then
            curl -sS -H "Authorization: Bearer ${ACCESS_TOKEN}" "https://firebase.googleapis.com/v1beta1/${RIDER_APP}/config" | jq -r .configFileContents | base64 -d > firebase-configs/google-services-com.hayyaride.rider.json || true
          fi
          # Driver
          DRIVER_APP=$(curl -sS -H "Authorization: Bearer ${ACCESS_TOKEN}" "https://firebase.googleapis.com/v1beta1/projects/${PID}/androidApps" | jq -r '.apps[] | select(.packageName=="com.hayyaride.driver").name')
          if [ -n "$DRIVER_APP" ] && [ "$DRIVER_APP" != "null" ]; then
            curl -sS -H "Authorization: Bearer ${ACCESS_TOKEN}" "https://firebase.googleapis.com/v1beta1/${DRIVER_APP}/config" | jq -r .configFileContents | base64 -d > firebase-configs/google-services-com.hayyaride.driver.json || true
          fi

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set Gradle and Java memory options
        run: |
          echo "GRADLE_OPTS=-Dorg.gradle.jvmargs=-Xmx3g -Dkotlin.daemon.jvm.options=-Xmx1024m" >> $GITHUB_ENV
          echo "JAVA_TOOL_OPTIONS=-Xmx2g" >> $GITHUB_ENV

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          cache: true

      - name: Accept Android SDK licenses (best-effort)
        run: |
          if command -v sdkmanager >/dev/null 2>&1; then
            yes | sdkmanager --licenses || true
          elif [ -n "${ANDROID_SDK_ROOT:-}" ] && [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          else
            echo "sdkmanager not found; skipping license acceptance"
          fi

      - name: Flutter version
        run: |
          command -v flutter
          command -v dart
          flutter --version
          dart --version

      - name: Flutter pub get (Rider)
        if: ${{ hashFiles('rider/pubspec.yaml') != '' }}
        working-directory: rider
        run: |
          flutter --version
          dart --version
          flutter pub get

      - name: Flutter pub get (Driver)
        if: ${{ hashFiles('driver/pubspec.yaml') != '' }}
        working-directory: driver
        run: |
          flutter --version
          dart --version
          flutter pub get

      - name: Inject google-services.json and maps key (Rider)
        if: ${{ hashFiles('rider/android/app/src/main/AndroidManifest.xml') != '' }}
        env:
          ANDROID_MAPS_KEY: ${{ github.event.inputs.android_maps_key || secrets.ANDROID_MAPS_DEV_KEY }}
        run: |
          test -n "$ANDROID_MAPS_KEY"
          mkdir -p rider/android/app
          # Prefer downloaded config; otherwise fall back to repo copy if present
          if [ -f firebase-configs/google-services-com.hayyaride.rider.json ]; then
            cp firebase-configs/google-services-com.hayyaride.rider.json rider/android/app/google-services.json
          elif [ -f deploy/outputs/firebase_configs/google-services-com.hayyaride.rider.json ]; then
            cp deploy/outputs/firebase_configs/google-services-com.hayyaride.rider.json rider/android/app/google-services.json
          fi
          mkdir -p rider/android/app/src/main/res/values
          cat > rider/android/app/src/main/res/values/google_maps_api.xml <<EOF
          <resources>
            <string name="google_maps_key" translatable="false">$ANDROID_MAPS_KEY</string>
          </resources>
          EOF
          MF=rider/android/app/src/main/AndroidManifest.xml
          if [ -f "$MF" ]; then
            if ! grep -q 'com.google.android.geo.API_KEY' "$MF"; then
              sed -i "/<application/a \\    <meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"@string/google_maps_key\" \/>" "$MF"
            fi
          fi
          APP_GRADLE=rider/android/app/build.gradle
          PROJ_GRADLE=rider/android/build.gradle
          if [ -f rider/android/app/google-services.json ]; then
            echo "google-services.json found for Rider; enabling Firebase plugin and messaging dependency"
            grep -q "apply plugin: \"com.google.gms.google-services\"" "$APP_GRADLE" || echo "apply plugin: \"com.google.gms.google-services\"" >> "$APP_GRADLE"
            grep -q "com.google.gms:google-services" "$PROJ_GRADLE" || sed -i "s/dependencies {/dependencies\n        classpath 'com.google.gms:google-services:4.4.2'/" "$PROJ_GRADLE"
            mkdir -p rider/android/app/src/main/java/com/hayyaride/rider
            cat > rider/android/app/src/main/java/com/hayyaride/rider/MyFirebaseService.java <<'EOF'
            package com.hayyaride.rider;
            import android.os.Handler;
            import android.os.Looper;
            import android.widget.Toast;
            import android.util.Log;
            import com.google.firebase.messaging.FirebaseMessagingService;
            public class MyFirebaseService extends FirebaseMessagingService {
              @Override public void onNewToken(String token) {
                Log.d("FCM_TOKEN", token);
                new Handler(Looper.getMainLooper()).post(() ->
                  Toast.makeText(getApplicationContext(), "FCM: "+token, Toast.LENGTH_LONG).show()
                );
              }
            }
            EOF
            # Ensure firebase messaging dependency (append a small block)
            cat >> "$APP_GRADLE" <<'EOF'
            
            dependencies {
              implementation platform('com.google.firebase:firebase-bom:33.7.0')
              implementation 'com.google.firebase:firebase-messaging'
            }
            EOF
            # Also ensure service entry if manifest exists
            if [ -f "$MF" ] && ! grep -q 'MyFirebaseService' "$MF"; then
              sed -i "/<application/a \\    <service android:name=\".MyFirebaseService\" android:exported=\"false\">\\n        <intent-filter>\\n            <action android:name=\"com.google.firebase.MESSAGING_EVENT\" \/>\\n        <\/intent-filter>\\n    <\/service>" "$MF"
            fi
          else
            echo "No google-services.json for Rider; disabling Firebase plugin to avoid build failure"
            # Remove plugin application lines if present (both apply and plugins DSL)
            sed -i "/apply plugin: \"com.google.gms.google-services\"/d" "$APP_GRADLE" || true
            sed -i "/id ['\"]com.google.gms.google-services['\"]/d" "$APP_GRADLE" || true
            # Remove classpath if present
            sed -i "/com.google.gms:google-services/d" "$PROJ_GRADLE" || true
          fi

      - name: Inject google-services.json and maps key (Driver)
        if: ${{ hashFiles('driver/android/app/src/main/AndroidManifest.xml') != '' }}
        env:
          ANDROID_MAPS_KEY: ${{ github.event.inputs.android_maps_key || secrets.ANDROID_MAPS_DEV_KEY }}
        run: |
          test -n "$ANDROID_MAPS_KEY"
          mkdir -p driver/android/app
          # Prefer downloaded config; otherwise fall back to repo copy if present
          if [ -f firebase-configs/google-services-com.hayyaride.driver.json ]; then
            cp firebase-configs/google-services-com.hayyaride.driver.json driver/android/app/google-services.json
          elif [ -f deploy/outputs/firebase_configs/google-services-com.hayyaride.driver.json ]; then
            cp deploy/outputs/firebase_configs/google-services-com.hayyaride.driver.json driver/android/app/google-services.json
          fi
          mkdir -p driver/android/app/src/main/res/values
          cat > driver/android/app/src/main/res/values/google_maps_api.xml <<EOF
          <resources>
            <string name="google_maps_key" translatable="false">$ANDROID_MAPS_KEY</string>
          </resources>
          EOF
          MF=driver/android/app/src/main/AndroidManifest.xml
          if [ -f "$MF" ]; then
            if ! grep -q 'com.google.android.geo.API_KEY' "$MF"; then
              sed -i "/<application/a \\    <meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"@string/google_maps_key\" \/>" "$MF"
            fi
          fi
          APP_GRADLE=driver/android/app/build.gradle
          PROJ_GRADLE=driver/android/build.gradle
          if [ -f driver/android/app/google-services.json ]; then
            echo "google-services.json found for Driver; enabling Firebase plugin and messaging dependency"
            grep -q "apply plugin: \"com.google.gms.google-services\"" "$APP_GRADLE" || echo "apply plugin: \"com.google.gms.google-services\"" >> "$APP_GRADLE"
            grep -q "com.google.gms:google-services" "$PROJ_GRADLE" || sed -i "s/dependencies {/dependencies\n        classpath 'com.google.gms:google-services:4.4.2'/" "$PROJ_GRADLE"
            mkdir -p driver/android/app/src/main/java/com/hayyaride/driver
            cat > driver/android/app/src/main/java/com/hayyaride/driver/MyFirebaseService.java <<'EOF'
            package com.hayyaride.driver;
            import android.os.Handler;
            import android.os.Looper;
            import android.widget.Toast;
            import android.util.Log;
            import com.google.firebase.messaging.FirebaseMessagingService;
            public class MyFirebaseService extends FirebaseMessagingService {
              @Override public void onNewToken(String token) {
                Log.d("FCM_TOKEN", token);
                new Handler(Looper.getMainLooper()).post(() ->
                  Toast.makeText(getApplicationContext(), "FCM: "+token, Toast.LENGTH_LONG).show()
                );
              }
            }
            EOF
            cat >> "$APP_GRADLE" <<'EOF'
            
            dependencies {
              implementation platform('com.google.firebase:firebase-bom:33.7.0')
              implementation 'com.google.firebase:firebase-messaging'
            }
            EOF
            if [ -f "$MF" ] && ! grep -q 'MyFirebaseService' "$MF"; then
              sed -i "/<application/a \\    <service android:name=\".MyFirebaseService\" android:exported=\"false\">\\n        <intent-filter>\\n            <action android:name=\"com.google.firebase.MESSAGING_EVENT\" \/>\\n        <\/intent-filter>\\n    <\/service>" "$MF"
            fi
          else
            echo "No google-services.json for Driver; disabling Firebase plugin to avoid build failure"
            sed -i "/apply plugin: \"com.google.gms.google-services\"/d" "$APP_GRADLE" || true
            sed -i "/id ['\"]com.google.gms.google-services['\"]/d" "$APP_GRADLE" || true
            sed -i "/com.google.gms:google-services/d" "$PROJ_GRADLE" || true
          fi

      - name: Build Rider APK (debug)
        if: ${{ hashFiles('rider/pubspec.yaml') != '' }}
        working-directory: rider
        run: flutter build apk --debug

      - name: Build Driver APK (debug)
        if: ${{ hashFiles('driver/pubspec.yaml') != '' }}
        working-directory: driver
        run: flutter build apk --debug

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hayyaride-apks
          path: |
            rider/build/app/outputs/flutter-apk/app-debug.apk
            driver/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: ignore
